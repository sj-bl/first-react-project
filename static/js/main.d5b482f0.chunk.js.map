{"version":3,"sources":["components/cards/cards.components.jsx","components/cards-list/card-list.components.jsx","components/searchBox/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","recipe","image_url","alt","title","CardList","prop","recipes","map","id","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","res","json","data","setState","e","console","log","this","filterRecipe","filter","toLowerCase","includes","target","value","Object","values","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUAGaA,G,kBAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,QACb,yBAAKC,IAAG,UAAKF,EAAMG,OAAOC,WAAaC,IAAI,OAAOJ,UAAU,QAC5D,4BAAKD,EAAMG,OAAOG,UCFTC,EAAW,SAACC,GACvB,OACE,yBAAKP,UAAU,YACZO,EAAKC,QAAQC,KAAI,SAACP,EAAQQ,GAAT,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAIR,OAAQA,SCLlBU,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEd,UAAU,YACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCCG,E,kDAnCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXV,QAAS,GACTW,YAAa,IAJH,E,gEAOO,IAAD,OAClB,IACEC,MAAM,wDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAAEjB,QAASgB,EAAKhB,aAChD,MAAOkB,GACPC,QAAQC,IAAIF,M,+BAGN,IAAD,SAC0BG,KAAKX,MAA9BV,EADD,EACCA,QAASW,EADV,EACUA,YAEXW,EAAetB,EAAQuB,QAAO,SAAC7B,GAAD,OAClCA,EAAOG,MAAM2B,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CACEa,YAAY,WACZC,aAAc,SAACY,GAAD,OAAO,EAAKD,SAAS,CAAEN,YAAaO,EAAEQ,OAAOC,WAG7D,kBAAC,EAAD,CAAU3B,QAAS4B,OAAOC,OAAOP,U,GA9BvBQ,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.d5b482f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card\">\r\n    <img src={`${props.recipe.image_url}`} alt=\"user\" className=\"img\" />\r\n    <h4>{props.recipe.title}</h4>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.style.css\";\r\nimport { Card } from \"../cards/cards.components\";\r\n\r\nexport const CardList = (prop) => {\r\n  return (\r\n    <div className=\"cardList\">\r\n      {prop.recipes.map((recipe, id) => (\r\n        <Card key={id} recipe={recipe}></Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search.style.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"searchbox\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport { CardList } from \"./components/cards-list/card-list.components\";\nimport { SearchBox } from \"./components/searchBox/search.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      recipes: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    try {\n      fetch(\"https://forkify-api.herokuapp.com/api/search?q=pizza\")\n        .then((res) => res.json())\n        .then((data) => this.setState({ recipes: data.recipes }));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  render() {\n    const { recipes, searchField } = this.state;\n\n    const filterRecipe = recipes.filter((recipe) =>\n      recipe.title.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <SearchBox\n          placeholder=\"Search..\"\n          handleChange={(e) => this.setState({ searchField: e.target.value })}\n        ></SearchBox>\n        {/* <h1>{filterRecipe}</h1> */}\n        <CardList recipes={Object.values(filterRecipe)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}